{"version":3,"sources":["components/HeaderEl/index.js","utils/employeeApi.js","components/Search/index.js","components/Card/employee.js","components/Container/container.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderEl","styles","header","margin","height","backgroundColor","color","textShadow","h1","position","top","style","api","getEmployees","axios","get","Search","props","id","onSubmit","handleSearch","maxWidth","display","type","className","placeholder","aria-label","aria-describedby","name","onChange","handleChange","value","onClick","Card","sortByName","results","map","result","src","picture","medium","alt","first","last","cell","href","email","login","uuid","Container","state","search","employees","employeesData","ascending","filteredRes","sorted","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","searchEmployee","API","then","res","data","catch","err","preventDefault","alert","includes","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e8e195d.chunk.js","sourcesContent":["// I should create the header that will be\n// a constant element on my page\nimport React from \"react\";\n\nfunction HeaderEl() {\n  let styles = {\n    header: {\n      margin: \"0px auto 10px \",\n      height: \"200px\",\n      backgroundColor: \"#FED766\",\n      color: \"white\",\n      textShadow: \"1px 1px black\",\n    },\n    h1: {\n      position: \"relative\",\n      top: \"35%\",\n    },\n  };\n\n  return (\n    <>\n      <header style={styles.header}>\n        <h1 style={styles.h1}>Employee Directory</h1>\n      </header>\n    </>\n  );\n}\n\nexport default HeaderEl;\n","//import axios for api calls\nimport axios from \"axios\";\n\nconst api = {\n    // https://randomuser.me/api/\n  \n    // another way of writing the api call\n    // getByEmployee: employeeName => {\n    //     return axios.get(`https://randomuser.me/api/?inc=${employeeName}`);\n    // }\n  \n    // when you dont have the curly braces on an ES6 functions, it will return \n    // the right handside evalutation...since its only one line.\n     getEmployees: () =>\n      axios.get(\"https://randomuser.me/api/?results=200&nat=us\"),\n\n\n}\n\nexport default api;\n","import React from \"react\";\n\n//name\nfunction Search(props) {\n  let styles = {\n    form: {\n      maxWidth: \"500px\",\n      margin: \"15px auto\",\n      display: \"flex\",\n    },\n    list: {\n      listStyleType: \"none\",\n    },\n  };\n  //render return\n  return (\n    <>\n      <main>\n        <form id=\"searchForm\" onSubmit={props.handleSearch} style={styles.form}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Type employee name...\"\n            aria-label=\"Recipient's username\"\n            aria-describedby=\"button-addon2\"\n            name=\"search\"\n            onChange={props.handleChange}\n            value={props.value}\n            id=\"employees\"\n          />\n          <button\n            className=\"btn btn-outline-primary\"\n            onClick={props.handleSearch}\n            type=\"submit\"\n            id=\"search\"\n          >\n            Search\n          </button>\n        </form>\n      </main>\n    </>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\n\nfunction Card(props) {\n  let styles = {\n    table: {\n      margin: \"30px auto\"\n    },\n  };\n  return (\n    <>\n     <table className=\"tableEmployee \" style={styles.table}>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th onClick={props.sortByName}>Name</th>\n                    <th>Phone</th>\n                    <th>E-mail</th>\n                </tr>\n            </thead>\n\n            <tbody className= \"\">\n                {props.results.map(result => (\n                    <tr className=\"table\" key={result.login.uuid}>\n                     \n\n                        <td> <img className=\"\n                        \"src={result.picture.medium} alt=\"\" /></td>\n                        \n                        <td>{result.name.first + \" \" + result.name.last}  </td>\n\n                        <td>{result.cell}</td>\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\n                        \n                    </tr>\n                ))}\n            </tbody>\n        </table >\n\n    </>\n  );\n}\n\nexport default Card;\n","import API from \"../../utils/employeeApi\";\nimport React, { Component } from \"react\";\n// Search component containes the search input box for the user to type in\nimport Search from \"../Search/index\";\n// Card component will contain the employee data rendered\n// nicely in a card element\nimport Card from \"../Card/employee\";\n\n//use class if we're gonna use user interaction a.k.a state (setState).\nclass Container extends Component {\n  state = {\n    // search will start as an empty string and will change as the user types in a name\n    search: \"\",\n    // We'll be getting arrays of objects from the api call for\n    // employees and employeesData.\n    employees: [],\n    employeesData: [],\n    // the order of the results will start off as ramdom\n    // and then change to ascending when the user clicks on search button\n    ascending: \"\",\n  };\n\n  // Upon loading the page, this is what the user will see displayed\n  // the states of employess and employeeData will change and will\n  // display a list of random results\n  componentDidMount() {\n    API.getEmployees()\n      .then((res) =>\n        this.setState({\n          employees: res.data.results,\n\n          employeesData: res.data.results,\n        })\n      )\n\n      .catch((err) => console.log(err));\n  }\n\n  // sort results by name\n  sortByName = () => {\n    const filteredRes = this.state.employeesData;\n    if (this.state.ascending === \"asc\") {\n      const sorted = filteredRes.sort((a, b) =>\n        a.name.first > b.name.first ? 1 : -1\n      );\n      console.log(sorted);\n\n      this.setState({\n        employeesData: sorted,\n        ascending: \"desc\",\n      });\n    } else {\n      const sorted = filteredRes.sort((a, b) =>\n        a.name.first > b.name.first ? -1 : 1\n      );\n      console.log(sorted);\n\n      this.setState({\n        employeesData: sorted,\n        ascending: \"asc\",\n      });\n    }\n  };\n\n  // As the user types a name, the names matching the user input will be\n  // displayed on the screen.\n  handleChange = (event) => {\n    const employees = this.state.employees;\n    // Grabbing the value of the user input\n    const UserInput = event.target.value;\n    const employeesData = employees.filter(\n      (employee) =>\n        employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      employeesData,\n    });\n  };\n\n  // Api call should render random employee results when the\n  // page is first loaded or refreshed\n  searchEmployee = () => {\n    API.getEmployees()\n      .then((res) =>\n        this.setState({\n          employees: res.data.results,\n          employeesData: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n\n  // tracks when the search button is clicked on\n  // or the user presses enter.\n  handleSearch = (event) => {\n    event.preventDefault();\n    if (!this.state.search) {\n      alert(\"Enter an employee name, please.\");\n    }\n    const { employees, search } = this.state;\n\n    const employeesData = employees.filter((employee) =>\n      employee.name.first.toLowerCase().includes(search.toLowerCase())\n    );\n\n    this.setState({\n      employeesData,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Search\n          employee={this.state.employees}\n          handleSearch={this.handleSearch}\n          handleChange={this.handleChange}\n        />\n        <Card results={this.state.employeesData}\n        sortByName={this.sortByName} \n        />\n      </div>\n    );\n  }\n}\n\nexport default Container;\n","import \"./App.css\";\nimport HeaderEl from \"./components/HeaderEl/index\";\nimport Container from \"./components/Container/container\";\n// import Card from \"./components/Card/employee\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderEl />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}